import pygame
import random

# Initialize Pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 1280, 768
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Ninnekonde Pattu")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Load images
background_intro = pygame.image.load('background_intro.jpg')
background_level_one = pygame.image.load('background_level_one.jpg')
background_level_two = pygame.image.load('background_level_two.jpg')
background_level_three = pygame.image.load('background_level_three.jpg')
background_level_five = pygame.image.load('background_level_five.jpg')
background_level_six = pygame.image.load('background_level_six.jpg')
background_final = pygame.image.load('background_final.jpg')
button1_image = pygame.image.load('button1.png')
button2_image = pygame.image.load('button2.png')
button3_image = pygame.image.load('button3.png')

# Load sounds and background music
click_sound = pygame.mixer.Sound('click.wav')
transition_music = pygame.mixer.Sound('transition_sound.wav')
invalid_sound = pygame.mixer.Sound('invalid_answer.wav')  # New invalid answer sound effect
music_intro = 'music_intro.mp3'
music_level_two = 'music_level_two.mp3'
music_level_three = 'music_level_three.mp3'
music_final = 'music_final.mp3'
win_sound = pygame.mixer.Sound('win_sound.wav')
lose_sound = pygame.mixer.Sound('lose_sound.wav')


# Font
font = pygame.font.Font(None, 36)

# Functions
def play_transition():
    pygame.mixer.Sound.play(transition_music)
    pygame.time.delay(2000)

def play_music(music_file):
    pygame.mixer.music.load(music_file)
    pygame.mixer.music.play(-1)

def draw_text(text, x, y):
    text_surface = font.render(text, True, WHITE)
    screen.blit(text_surface, (x, y))

def random_event():
    events = [
        "Ormayundo ee mukham?......",
        "Mone, kathi thaazhe idada!",
        "thomasukuttyâ€¦ vittoda!...",
        "Monuse nee theernada.. 3 2 1... bhoom!!! "
    ]
    return random.choice(events)

def display_transition(text_lines):
    screen.fill(BLACK)
    y_offset = 100
    for line in text_lines:
        draw_text(line, 50, y_offset)
        y_offset += 50
    draw_text("Click to continue...", WIDTH // 2 - 100, HEIGHT - 100)
    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return False
            elif event.type == pygame.MOUSEBUTTONDOWN or event.type == pygame.KEYDOWN:
                pygame.mixer.Sound.play(click_sound)
                waiting = False

def intro():
    play_music(music_intro)
    screen.blit(background_intro, (0, 0))
    draw_text("Welcome to 'Ninte mathram choice'!", 50, 50)
    draw_text("Nee oru time traveler annu and ninne thirichu past lekku ayichekkuva, to prevent a big disaster..", 50, 100)
    draw_text("Make your choices wisely, but remember: sambhavikkanullath sambhavikkum.", 50, 150)
    draw_text("So monuse, all the best!....", 50, 200)
    pygame.display.flip()
    pygame.time.delay(6000)

def level_one():
    play_transition()
    screen.blit(background_level_one, (0, 0))
    draw_text("Nee past llekku thirichethi. first task: ", 50, 50)
    draw_text("You have three doors in front of you. One will open the way to next level. ", 50, 100)
    draw_text("1", 150, 250)
    screen.blit(button1_image, (150, 250))  # Draw button 1
    draw_text("2", 500, 250)
    screen.blit(button2_image, (500, 250))  # Draw button 2
    draw_text("3", 850, 250)
    screen.blit(button3_image, (850, 250))  # Draw button 3
    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = event.pos
                pygame.mixer.Sound.play(click_sound)
                if 500 <= mouse_x <= 500 + button2_image.get_width() and 250 <= mouse_y <= 250 + button2_image.get_height():
                    waiting = False
                    return True
                else:
                    return False  # Incorrect door clicked

def level_two():
    play_transition()
    play_music(music_level_two)
    screen.blit(background_level_two, (0, 0))
    number = str(random.randint(100, 999))
    draw_text(f"Enter the number shown below to continue: {number}", 50, 50)
    pygame.display.flip()

    user_input = ''
    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return False
            elif event.type == pygame.KEYDOWN:
                pygame.mixer.Sound.play(click_sound)
                if event.key == pygame.K_RETURN:
                    if user_input == number:
                        return True
                    else:
                        pygame.mixer.Sound.play(invalid_sound)  # Play invalid sound
                        user_input = ''  # Clear the input for retry
                elif event.key == pygame.K_BACKSPACE:
                    user_input = user_input[:-1]
                else:
                    user_input += event.unicode

        screen.blit(background_level_two, (0, 0))
        draw_text(f"Enter the number shown below to continue: {number}", 50, 50)
        draw_text(user_input, 50, 100)
        pygame.display.flip()

def level_three():
    play_transition()
    play_music(music_level_three)
    screen.blit(background_level_three, (0, 0))
    draw_text("Rearrange the letters to form a word: 'OTKS'", 50, 50)
    correct_answer = "KOST"
    pygame.display.flip()

    user_input = ''
    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return False
            elif event.type == pygame.KEYDOWN:
                pygame.mixer.Sound.play(click_sound)
                if event.key == pygame.K_RETURN:
                    if user_input.upper() == correct_answer:
                        return True
                    else:
                        pygame.mixer.Sound.play(invalid_sound)  # Play invalid sound
                        user_input = ''  # Clear the input for retry
                elif event.key == pygame.K_BACKSPACE:
                    user_input = user_input[:-1]
                else:
                    user_input += event.unicode

        screen.blit(background_level_three, (0, 0))
        draw_text("Rearrange the letters to form a word: 'OTKS'", 50, 50)
        draw_text(user_input.upper(), 50, 100)
        pygame.display.flip()

def level_four():
    play_transition()
    play_music(music_level_three)
    screen.blit(background_level_five, (0, 0))
    draw_text("Press SPACE at the right intervals to proceed!", 50, 50)
    pygame.display.flip()
    
    correct_timing = random.randint(1, 3)
    pygame.time.delay(correct_timing * 1000)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    if pygame.time.get_ticks() % correct_timing == 0:
                        return True
                    else:
                        pygame.mixer.Sound.play(invalid_sound)
                        pygame.time.delay(2000)

def level_six():
    # Tic-Tac-Toe game setup
    play_transition()
    play_music(music_level_three)
    screen.blit(background_level_six, (0, 0))
    draw_text("Level 6: Play XOX (Tic-Tac-Toe) against AI!", 50, 50)
    pygame.display.flip()

    # Board and game variables
    board = [["" for _ in range(3)] for _ in range(3)]
    player_turn = True  # Player is "X", AI is "O"
    cell_size = 200
    margin_x, margin_y = (WIDTH - cell_size * 3) // 2, (HEIGHT - cell_size * 3) // 2

    # Draws the game board
    def draw_board():
        screen.blit(background_level_six, (0, 0))
        for row in range(3):
            for col in range(3):
                x = margin_x + col * cell_size
                y = margin_y + row * cell_size
                pygame.draw.rect(screen, WHITE, (x, y, cell_size, cell_size), 3)
                if board[row][col] == "X":
                    draw_text("X", x + cell_size // 2 - 10, y + cell_size // 2 - 10)
                elif board[row][col] == "O":
                    draw_text("O", x + cell_size // 2 - 10, y + cell_size // 2 - 10)
        pygame.display.flip()

    # Checks for a win or draw
    def check_win():
        for row in board:
            if row[0] == row[1] == row[2] != "":
                return row[0]
        for col in range(3):
            if board[0][col] == board[1][col] == board[2][col] != "":
                return board[0][col]
        if board[0][0] == board[1][1] == board[2][2] != "":
            return board[0][0]
        if board[0][2] == board[1][1] == board[2][0] != "":
            return board[0][2]
        return None

    # AI randomly chooses an empty spot
    def ai_move():
        empty_cells = [(r, c) for r in range(3) for c in range(3) if board[r][c] == ""]
        if empty_cells:
            row, col = random.choice(empty_cells)
            board[row][col] = "O"

    # Tic-Tac-Toe Game Loop
    while True:
        draw_board()
        winner = check_win()
        if winner:
            pygame.mixer.Sound.play(win_sound if winner == "X" else lose_sound)
            draw_text("You Win!" if winner == "X" else "You Lose!", WIDTH // 2 - 50, HEIGHT // 2)
            pygame.display.flip()
            pygame.time.delay(3000)
            return winner == "X"  # Return True if player wins, else False

        # Check for draw
        if all(cell != "" for row in board for cell in row):
            draw_text("It's a Draw!", WIDTH // 2 - 50, HEIGHT // 2)
            pygame.display.flip()
            pygame.time.delay(3000)
            return False

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return False
            if player_turn and event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = event.pos
                col = (mouse_x - margin_x) // cell_size
                row = (mouse_y - margin_y) // cell_size
                if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == "":
                    board[row][col] = "X"
                    player_turn = False
            elif not player_turn:
                pygame.time.delay(500)
                ai_move()
                player_turn = True                        


def final_level():
    play_transition()
    play_music(music_final)
    screen.blit(background_final, (0, 0))
    draw_text("You have reached the final level. Choose wisely.", 50, 50)
    draw_text("Press 'A' to end the game.", 50, 100)
    draw_text("Press 'B' to continue.", 50, 150)
    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return False
            elif event.type == pygame.KEYDOWN:
                pygame.mixer.Sound.play(click_sound)
                if event.key == pygame.K_a:
                    return False
                elif event.key == pygame.K_b:
                    draw_text("Are you sure? Press 'Y' to confirm, 'N' to go back.", 50, 200)
                    pygame.display.flip()
                    confirm = True
                    while confirm:
                        for event in pygame.event.get():
                            if event.type == pygame.KEYDOWN:
                                if event.key == pygame.K_y:
                                    confirm = False
                                    return False  # End game after confirmation
                                elif event.key == pygame.K_n:
                                    confirm = False
                                    return True

def play_game():
    intro()
    if level_one():
        display_transition([
            "After narrowly escaping, you find yourself in an unfamiliar place.",
            "Strange symbols surround you, hinting at a deeper mystery ahead."
        ])
        if level_two():
            display_transition([
                "You've cracked the first clue, but challenges are growing harder.",
                "Stay focused; a hidden truth awaits beyond each puzzle."
            ])
            if level_three():
                display_transition([
                    "Just one more challenge to go...",
                    "The final level lies beyond, but the truth may be more than you expect."
                ])
                if level_four():
                    display_transition([
                    "You've cracked the first clue, but challenges are growing harder.",
                    "Stay focused; a hidden truth awaits beyond each puzzle."
                    ])
                    if level_six():
                        display_transition([
                        "You've cracked the first clue, but challenges are growing harder.",
                        "Stay focused; a hidden truth awaits beyond each puzzle."
                        ])
                        if final_level():
                                pass
    conclusion()

def conclusion():
    screen.blit(background_final, (0, 0))
    draw_text("No matter what you did, the disaster has occurred. Nee enth cheythalum karyam illa.", 50, 50)
    draw_text("Thank you for playing!", 50, 200)
    pygame.display.flip()
    pygame.time.delay(6000)

# Start the game
play_game()
pygame.quit()
